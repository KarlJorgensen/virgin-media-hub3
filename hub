#!/usr/bin/python

import argparse
import os
import virginmedia

SUBCOMMANDS = []

def subcommand(f):
    """A function decorator for subcommands"""
    SUBCOMMANDS.append(f)
    return f

class args(object):
    """A function decorator that adds arguments to a subcommand.
    It should be passed an array of (args, kwargs) - these will be used (eventually) call ArgumentParser.add_argument()
    """
    def __init__(self, args):
        self._args = args

    def __call__(self, f):
        f.args = self._args
        return f

def nologin(f):
    """A function decorator that flags the subcommand as not needing login"""
    f.needs_login = False
    return f

def nohub(f):
    """A function decorator that flags the subcommand as not needing a hub to talk to"""
    f.needs_hub = False
    return f

def dump_properties(hub, props):
    for property in props:
        print property, ":", getattr(hub, property)

@subcommand
def info(hub, args):
    """Show General information about the hub"""
    dump_properties(hub,
                    [
                        "firstInstallWizardCompleted",
                        "hardwareVersion",
                        "softwareVersion",
                        "wanIPProvMode",
                        "wanIPv4Address",
                        "wanIPv4LeaseTimeSecsRemaining",
                        "wanIPv6Addr",
                        "dns_servers",
                        "cmDoc30SetupPacketCableRegion"
                    ])

@subcommand
def lansettings(hub, args):
    """Show LAN settings"""
    dump_properties(hub,
                    [
                        "lanIPAddress",
                        "lanSubnetMask",
                        "lanDHCPEnabled",
                        "lanGatewayIpv4",
                        "lanDHCPv4Start",
                        "lanDHCPv4End",
                        "lanDHCPv4LeaseTimeSecs",
                        "lanDHCPv6PrefixLength",
                        "lanDHCPv6Start",
                        "lanDHCPv6LeaseTime"
                    ])

@subcommand
def wansettings(hub, args):
    """Show Wide Area Network settings"""
    dump_properties(hub,
                    [
                        "wanIPv4Address",
                        "dns_servers",
                        "wanIPv4Gateway",
                        "wanMACAddr",
                        "wanMTUSize",
                        "wanIPv6Addr",
                        "wanIPv6Gateway",
                        ])

@subcommand
def demo(hub, args):
    """Run a demo of what properties we can extract from the hub. This command many be removed in the future."""
    print "Doing demo"
    print "Got", hub
    #_describe_oids(hub)
    virginmedia._demo(hub)

@subcommand
@nohub
def properties(args):
    for d in sorted(virginmedia.known_properties):
        print d

@subcommand
@args([
    ( "property", { "nargs": "+", "help": "The property to retrieve", "choices": virginmedia.known_properties } )
])
def get(hub, args):
    """Get a specific property"""
    for p in args.property:
        print getattr(hub, p)

@subcommand
@args([
    ( "property",  { "help": "The name of the property to set",
                     "choices": virginmedia.known_properties
    } ),
    ( "value", { "help": "Value to set the property to"})
    ])
def set(hub, args):
    """Set a specific property.

    Note that not all properties are settable."""
    oldvalue = getattr(hub, args.property)
    setattr(hub, args.property, args.value)
    print "Changed", args.property, "from", oldvalue, "to", args.value

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", "-H",
                        help="IP Address/dns name of the hub.  Uses the HUB environment variable as a default value - and 192.168.0.1 if that is not set",
                        default=os.environ.get("HUB", "192.168.0.1"))
    parser.add_argument("--username", "-u",
                        help="User name to login as. Uses the HUB_USER environment variable as a default value - and 'admin' if that is not set",
                        default=os.environ.get("HUB_USER", "admin"))
    parser.add_argument("--password", "-p",
                        help="Password to authenticate on the hub",
                        default=os.environ.get("HUB_PASSWORD"))
    subparsers = parser.add_subparsers(help="sub-command help")

    for subcommand in SUBCOMMANDS:
        cmd = subparsers.add_parser(subcommand.__name__,
                                    help=subcommand.__doc__)

        if hasattr(subcommand, 'args'):
            for a in subcommand.args:
                cmd.add_argument(a[0], **a[1])
        cmd.set_defaults(func=subcommand)

    args = parser.parse_args()
    try:
        needs_login = args.func.needs_login
    except AttributeError:
        needs_login = True

    try:
        needs_hub = args.func.needs_hub
    except AttributeError:
        needs_hub = True

    if needs_hub:
        with virginmedia.Hub() as hub:
            if needs_login and args.password:
                hub.login(username=args.username,
                          password=args.password)
            args.func(hub, args)
    else:
        args.func(args)

if __name__ == '__main__':
    main()
