#!/usr/bin/python3
"""General command-line interface to the Virgin Media Hub3

"""
import argparse
import os
import virginmedia

SUBCOMMANDS = []

def subcommand(func):
    """A function decorator for subcommands"""
    SUBCOMMANDS.append(func)
    return func

class Args:
    """A function decorator that adds arguments to a subcommand.

    It should be passed an array of (args, kwargs) - these will be
    used (eventually) call ArgumentParser.add_argument()

    """
    def __init__(self, args):
        self._args = args

    def __call__(self, func):
        func.args = self._args
        return func

def nologin(func):
    """A function decorator that flags the subcommand as not needing login"""
    func.needs_login = False
    return func

def nohub(func):
    """A function decorator that flags the subcommand as not needing a hub to talk to"""
    func.needs_hub = False
    return func

def dump_properties(hub, props):
    """Print the listed properties on stdout, nicely formatted"""
    for prop in props:
        print(prop, ":", getattr(hub, prop))

@subcommand
def info(hub, args):
    """Show General information about the hub"""
    dump_properties(hub,
                    [
                        "modelname",
                        "family",
                        "hardwareVersion",
                        "softwareVersion",
                        "firstInstallWizardCompleted",
                        "wanIPProvMode",
                        "wanIPv4Address",
                        "wanIPv4LeaseTimeSecsRemaining",
                        "wanIPv6Addr",
                        "dns_servers",
                        "cmDoc30SetupPacketCableRegion"
                    ])

@subcommand
def lansettings(hub, args):
    """Show LAN settings"""
    dump_properties(hub,
                    [
                        "lanIPAddress",
                        "lanSubnetMask",
                        "lanDHCPEnabled",
                        "lanGatewayIpv4",
                        "lanDHCPv4Start",
                        "lanDHCPv4End",
                        "lanDHCPv4LeaseTimeSecs",
                        "lanDHCPv6PrefixLength",
                        "lanDHCPv6Start",
                        "lanDHCPv6LeaseTime"
                    ])

@subcommand
def wansettings(hub, args):
    """Show Wide Area Network settings"""
    dump_properties(hub,
                    [
                        "wanIPv4Address",
                        "dns_servers",
                        "wanIPv4Gateway",
                        "wanMACAddr",
                        "wanMTUSize",
                        "wanIPv6Addr",
                        "wanIPv6Gateway",
                        ])

@subcommand
def portforward_list(hub, args):
    """List current port forwardings"""
    for pfentry in hub.portForwardings():
        print(str(pfentry))

@subcommand
@nohub
def properties(args):
    """Get a list of the known property names. Not all properties will be settable"""
    for prop in sorted(virginmedia.KNOWN_PROPERTIES):
        print(prop)

@subcommand
@Args([
    ("property", {"nargs": "+",
                  "help": "The property to retrieve",
                  "choices": virginmedia.KNOWN_PROPERTIES})
])
def get_property(hub, args):
    """Get one or more properties"""
    for prop in args.property:
        print(getattr(hub, prop))

@subcommand
@Args([
    ("property", {"help": "The name of the property to set",
                  "choices": virginmedia.KNOWN_PROPERTIES}),
    ("value", {"help": "Value to set the property to"})])
def set_property(hub, args):
    """Set a specific property.

    Note that not all properties are settable."""
    oldvalue = getattr(hub, args.property)
    try:
        setattr(hub, args.property, args.value)
    except AttributeError:
        raise SystemExit("Property {0} is not settable".format(args.property))
    print("Changed", args.property, "from", oldvalue, "to", args.value)

@subcommand
@Args([
    ("oid", {"help": "OID of the SNMP property to retrieve"})])
def snmp_get(hub, args):
    """Retrieve an SNMP property from the hub.

    The property name should be give as the OID - i.e. dot-separated
    numbers, e.g. '1.3.6.1.4.1.4115.1.20.1.1.5.10.0'

    """
    args.oid = args.oid.strip('.')
    print("{o} = {v}".format(o=args.oid, v=hub.snmpGet(args.oid)))

def main():
    """Main function. Obviously!"""

    parser = argparse.ArgumentParser()
    parser.add_argument("--host", "-H",
                        help="IP Address/dns name of the hub. "
                        "Uses the HUB environment variable as a default value"
                        "- and 192.168.0.1 if that is not set",
                        default=os.environ.get("HUB", "192.168.0.1"))
    parser.add_argument("--username", "-u",
                        help="User name to login as. "
                        "Uses the HUB_USER environment variable as a default value"
                        " - and 'admin' if that is not set",
                        default=os.environ.get("HUB_USER", "admin"))
    parser.add_argument("--password", "-p",
                        help="Password to authenticate on the hub. "
                        "Uses the HUB_PASSWORD environment variable if not specified. "
                        "If not password is given, no login will be attempted",
                        default=os.environ.get("HUB_PASSWORD"))
    subparsers = parser.add_subparsers(help="sub-command help")

    for cmd in SUBCOMMANDS:
        cmd_parser = subparsers.add_parser(cmd.__name__,
                                           help=cmd.__doc__)

        if hasattr(cmd, 'args'):
            for arg in cmd.args:
                cmd_parser.add_argument(arg[0], **arg[1])
        cmd_parser.set_defaults(func=cmd)

    args = parser.parse_args()
    if not hasattr(args, "func"):
        parser.print_usage()
        raise SystemExit()

    try:
        needs_login = args.func.needs_login
    except AttributeError:
        needs_login = True

    try:
        needs_hub = args.func.needs_hub
    except AttributeError:
        needs_hub = True

    if needs_hub:
        with virginmedia.Hub() as hub:
            if needs_login and args.password:
                hub.login(username=args.username,
                          password=args.password)
            args.func(hub, args)
    else:
        args.func(args)

if __name__ == '__main__':
    main()
